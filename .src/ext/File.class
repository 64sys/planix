' Gambas class file

'
' base-rad
' Rapid Application Development for Gambas
'
' Copyright (C) Mart√≠n Belmonte
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
'

Export

''' This class extends the class File.

Library "libc:6"

Public Struct stat_
  st_dev As Long
  st_ino As Long
  st_nlink As Long
  st_mode As Integer
  st_uid As Integer
  st_gid As Integer
  __pad0 As Integer
  st_rdev As Long
  st_size As Long
  st_blksize As Long
  st_blocks As Long
  st_atime As Long
  st_atimensec As Long
  st_mtime As Long
  st_mtimensec As Long
  st_ctime As Long
  st_ctimensec As Long
  __glibc_reserved[3] As Long
End Struct

Private Const _STAT_VER_LINUX As Integer = 1
Private Extern __xstat(_STAT_VER As Integer, __path As String, __statbuf As Stat_) As Integer

'' <b>RAD Extension.</b><br>
'' Create a file parameters list using the GNU coreutils program stat. Note: the tags for access to the information are:<br>
'' Dev, Ino, Path, Link, Mode, SetUID, SetGID, Rdev, Size, BlkSize, Blocks, LastAccess, LastModified, LastChange<br>
'' Original <https://www.gambas-it.org/wiki/index.php?title=Stat_()>

Static Public Sub Stat(f As String) As Collection

  Dim i As Integer
  Dim st As New Stat_
  Dim inf As New Collection

  i = __xstat(_STAT_VER_LINUX, f, st)
  If i < 0 Then Error.Raise("Function error '__xstat()' !")

  With st
    inf.Add(.st_dev, "Dev")
    inf.Add(.st_ino, "Ino")
    inf.Add(f, "Path")
    inf.Add(.st_nlink, "Link")
    inf.Add(.st_mode, "Mode")
    inf.Add(.st_uid, "SetUID")
    inf.Add(.st_gid, "SetGID")
    inf.Add(.st_rdev, "Rdev")
    inf.Add(.st_size, "Size")
    inf.Add(.st_blksize, "BlkSize")
    inf.Add(.st_blocks, "Blocks")
    inf.Add(.st_atime, "LastAccess")
    inf.Add(.st_mtime, "LastModified")
    inf.Add(.st_ctime, "LastChange")
  End With

  Return inf

End

'' <b>RAD Extension.</b><br>
'' Compresses all the files in a directory into a single zip file. At the moment it works properly only with the zip option

Static Public Function DirZip(sDir As String, Optional md As String) As String

  Dim sFile As String
  Dim cmd As String
  Dim uDir As String
  Dim cDir As String

  uDir = fil.DirParent(sDir)
  cDir = Split(sDir, "/")[Split(sDir, "/").Max]

  sFile = sDir & ".zip"
  cmd = "cd '" & sDir & "';zip -jr '" & sFile & "' *.*"

  If cmd <> "" Then
    Shell cmd Wait
  Endif
  If Exist(sFile) Then
    Return sFile
  Else
    Return ""
  Endif

End

'' <b>RAD Extension.</b><br>
'' Obtaining a file crc32. As parameter require the complete path then as an optional U or L that will convert everything to Ucase or Lcase.

Static Public Function CRC32(Path As String, Optional sc As String) As String

  Dim crc As String

  Shell "crc32 '" & Path & "'" To crc

  crc = String.Mid(crc, 1, 8) ' 8 character cut to remove the \n and other characters if they occur

  Select sc
    Case "Upper", "U", "u", ""
      crc = String.UCase(crc)
    Case "L", "l"
      crc = String.LCase(crc)
  End Select

  Return crc

End

'' <b>RAD Extension.</b><br>
'' Returns a list of files in a directory that is passed as a parameter. Optionally, a list of existing files can be passed as a parameter, which will be omitted from the output list if they are found, and a file extension filter in the mp3 style:ods:txt

Public Function FilesNew(strDirectory As String, Optional stxFilesOpt As String[], Optional strFilterOpt As String) As String[]

  Dim stxFiles As New String[]
  Dim intFile As Integer
  Dim stxFilesNew As New String[] ' Directory files that exist in DB

  stxFiles = uty.ScanDir(strDirectory, strFilterOpt)

  If stxFilesOpt.Count > 0 Then
    For intFile = 0 To stxFiles.Max
      If stxFilesOpt.Find(stxFiles[intFile]) = -1 Then
        stxFilesNew.Add(stxFiles[intFile])
      Endif
    Next
  Else ' All files found will be new
    stxFilesNew = stxFiles
  Endif

  Return stxFilesNew

End

'' <b>RAD Extension.</b> Returns a text with the version of the file that is passed as a path. Use the
'' command file from terminal.
'' If Mode = True then the Short name is returned.

Static Public Function Version(Path As String, Optional Mode As Boolean) As String

  Dim strVersion As String

  If InStr(Path, "'") Then
    Path = Replace(Path, "'", "'\\''")
  Endif

  Shell "file '" & Path & "'" To strVersion

  If InStr(strVersion, ":") > 0 Then
    strVersion = Replace(strVersion, ": ", ":")
    strVersion = Split(strVersion, ":")[1]
    strVersion = PathArrange(strVersion)
  Endif
  If InStr(strVersion, ",") > 0 Then
    strVersion = Split(strVersion, ",")[0]
  Endif

  Return strVersion

  'If Mode = True Then
  '  Return VersionShort(strVersion)
  'Else
  '  Return strVersion
  'Endif

End

' '' Usual file versions
'
' Private Function VersionShort(s As String) As String
'
'   Dim fvn As New Collection
'
'   fvn.Add("DWG13", "DWG AutoDesk AutoCAD Release 13")
'   fvn.Add("DWG14", "DWG AutoDesk AutoCAD Release 14")
'   fvn.Add("DWG2000", "DWG AutoDesk AutoCAD 2000/2002")
'   fvn.Add("DWG2004", "DWG AutoDesk AutoCAD 2004/2005/2006")
'   fvn.Add("DWG2007", "DWG AutoDesk AutoCAD 2007/2008/2009")
'   fvn.Add("DWG2010", "DWG AutoDesk AutoCAD 2010/2011/2012")
'   fvn.Add("DWG2013", "DWG AutoDesk AutoCAD 2013/2014")
'   fvn.Add("DWG2018", "DWG AutoDesk AutoCAD 2018/2019/2020/2021")
'
'   If fvn.Exist(s) Then
'     Return fvn[s]
'   Else
'     Return s
'   Endif
'
' End

'' <b>RAD Extension.</b><br>
'' Move a file to the trash. Requires the file path to be passed and if
'' manages to move to the trash, returns True and if it fails, it returns FALSE.

Static Public Function Trash(strInputPath As String) As Boolean

  Dim out As Boolean

  out = False

  If Exist(strInputPath) Then
    If Stat(strInputPath).Type = gb.File Then
      Shell "gio trash '" & strInputPath & "'" Wait
      If Exist(strInputPath) = False Then
        out = True
      Endif
    Endif
  Endif

  Return out

End

'' <b>RAD Extension.</b><br>
'' Return a files list nested in a directory using a find command

Static Public Function ScanFiles(sPath As String, ext As String[], Optional maxdepth As Integer) As String[]

  Dim out As New String[]
  Dim t As String
  Dim ex As String

  If maxdepth = Null Or maxdepth < 1 Then
    maxdepth = 1
  Endif

  If Exist(sPath) Then
    Select ext.Count
      Case 0
        Shell "find '" & sPath & "' -maxdepth " & CStr(maxdepth) & " -type f -printf '%p\n' 2>&1" To t
      Case 1
        Shell "find '" & sPath & "' -maxdepth " & CStr(maxdepth) & " -type f -name '*.'" & ext[0] & " -printf '%p\n' 2>&1" To t
      Case Else
        ex = "\\( -name \"*."
        ex &= ext.Join("\" -o -name \"*.")
        ex &= "\" \\)"
        Shell "find '" & sPath & "' -maxdepth " & CStr(maxdepth) & " -type f " & ex & " -printf '%p\n' 2>&1" To t
    End Select

    out = Split(t, "\n")

    If out.Count > 0 Then
      If out[out.Max] = "" Then
        out.Remove(out.Max, 1)
      Endif
    Endif

  Endif

  Return out

End

'' <b>RAD Extension.</b><br>
'' Return a directories list nested in a parent directory

Static Public Function ScanDirs(sPath As String) As String[]

  Dim out As New String[]
  Dim t As String

  If Exist(sPath) Then
    Shell "find " & sPath & " -type d -printf '%p\n' 2>&1" To t
  Endif

  out = Split(t, "\n")

  If out[out.Max] = "" Then
    out.Remove(out.Max, 1)
  Endif

  Return out

End

' ######################## Reading and writing files

'' <b>RAD Extension.</b><br>
'' Read a text file inside a zip.
'' strZip is the full path of the zip file
'' strFile is the relative path of the txt file inside the zip

Static Public Function ReadZip(strZip As String, strFile As String) As String

  Dim sData As String

  If Exist(strZip) = True Then
    Shell "unzip -p '" & strZip & "' " & strFile & " 2>&1" To sData
  Endif

  Return sData

End

'' <b>RAD Extension.</b><br>
'' Returns a text array where each item is a line from the text file. If the line is empty in the text file, that is, it is an empty line, it is not passed to the martix, therefore the result is a return without blank lines.

Static Public Function Load2(strPath As String, Optional emptyLines As Boolean) As String[]

  Dim strList As String
  Dim stxListTmp As New String[]
  Dim stxList As New String[]
  Dim intList As Integer

  stxList.Clear

  If Exist(strPath) Then

    strList = File.Load(strPath)

    If InStr(strList, "\n") > -1 Then
      stxListTmp = Split(strList, "\n")
    Else
      If String.Len(strList) > 0 Then
        stxListTmp.Add(strList)
      Endif
    Endif

    For intList = 0 To stxListTmp.Max
      Select emptyLines
        Case False
          If stxListTmp[intList] <> "" Then
            stxList.Add(stxListTmp[intList])
          Endif
        Case Else
          stxList.Add(stxListTmp[intList])
      End Select
    Next
  Endif

  Return stxList

End

'' <b>RAD Extension.</b><br>
'' A simple log system, where a new line with date and text is added to a text file, the file and the text are neded as parameters.

Static Public Function Log(strPath As String, strMsg As String) As String

  Dim strText As String

  If strMsg <> "" Then
    If Exist(strPath) Then
      strText = File.Load(strPath)
    Else
      strText = ""
    End If
    strText = uty.Timestamp(Now()) & " " & strMsg & "\n" & strText
    File.Save(strPath, strText)
    Return strPath
  Else
    Return ""
  Endif

End

' ######################## Manejo de Directorios

'' <b>RAD Extension.</b><br>
'' Returns a path without line breaks or problematic characters

Static Public Function PathArrange(strPathRaw As String) As String

  Dim strPath As String

  strPath = Replace(strPathRaw, "file://", "")
  strPath = Replace(strPath, "\n", "")
  strPath = Replace(strPath, "\r", "")
  strPath = Replace(strPath, "\x00", "")

  Return strPath

End

'' <b>RAD Extension.</b><br>
'' Returns the directory without the path to it, that is, it returns the name of the directory. if you pass "/home/user/music" it will return "music"

Static Public Function BaseDir(Path As String) As String

  Dim strBase As String
  Dim stx As New String[]

  If InStr(Path, "/") > 0 Then
    stx = Split(Path, "/")
    strBase = stx[stx.Max]
  Endif

  Return strBase

End

'' <b>RAD Extension.</b><br>
'' Returns the parent directory of another one that is passed as a parameter.

Static Public Function ParentDir(Path As String) As String

  Dim strParent As String
  Dim intLast As Integer

  If Path <> "" Then
    intLast = String.RInStr(Path, "/")
    strParent = String.Mid(Path, 1, intLast)
    If String.Len(strParent) > 1 Then
      If String.Right(strParent) = "/" Then
        strParent = String.Mid(strParent, 1, String.Len(strParent) - 1)

      Endif
    Endif
  Endif

  If Exist(strParent) = False Then
    strParent = "-1"
  Else
    If Stat(strParent).Type <> gb.Directory Then
      strParent = "-1"
    Endif
  Endif

  Return strParent

End
