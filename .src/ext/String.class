' Gambas class file

'
' base-rad
' Rapid Application Development for Gambas
'
' Copyright (C) Mart√≠n Belmonte
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
'

Export

'' <b>RAD Extension.</b><br>
'' It removes the spaces at the beginning and the end of
'' a <b>s</b> and if there are repeated spaces, it converts them into one.

Static Public Function Trim(s As String) As String

  Dim sOut As String

  sOut = Trim(RTrim(s))
  While InStr(sOut, "  ")
    sOut = Replace(sOut, "  ", " ")
  Wend

  Return sOut

End

'' <b>RAD Extension.</b><br>
'' Counts how much times some string apear in other

Static Public Function Count(sWhere As String, sWhich As String) As Integer

  Dim k As Integer = 1
  Dim q As Integer
  Dim r As Integer

  Repeat
    q = InStr(sWhere, sWhich, k)
    If q > 0 Then
      Inc r
      k = q + String.Len(sWhich)
    Endif
  Until InStr(sWhere, sWhich, k) = 0 Or k > String.Len(sWhere)

  Return r

End

'' <b>RAD Extension.</b><br>
'' Returns a string with all its characters converted to ascii or utf-8 when bad codification ocurr.

Static Public Function Flat(s As String) As String

  Dim k As Integer = 1
  Dim q As Integer
  Dim r As Integer

  Dim uni As String
  Dim stx As New String[]
  Dim u As String
  Dim rep As String
  Dim i As Integer

  Repeat
    q = InStr(s, "\\U+", k)
    If q > 0 Then
      Inc r
      uni = String.Mid(s, q, 7)
      stx.Add(uni)
      k = q + String.Len("\\U+")
    Endif
  Until InStr(s, "\\U+", k) = 0 Or k > String.Len(s)

  For Each u In stx
    i = Val("&h" & String.Mid(u, 4, 4) & "&")
    rep = String.Chr(i)
    s = Replace(s, u, rep)
  Next

  Return s

End

' ------------------------------------- GO Package strings

'' <b>GO Package strings</b><br>
'' <u>Compare</u> returns an integer comparing two strings lexicographically. The result will be 0 If a == b, -1 If a < b, And +1 If a > b.

Static Public Function Compare(a As String, b As String) As Integer

  If a == b Then
    Return 0
  Else
    If a < b Then
      Return -1
    Else
      Return 1
    Endif
  Endif

End

'' <b>GO Package strings</b><br>
'' Contains reports whether substr is within s.

Static Public Function Contains(s As String, substr As String) As Boolean

  If InStr(s, substr) > 0 Then
    Return True
  Else
    Return False
  Endif

End

'' <b>GO Package strings</b><br>
'' <u>ContainsAny</u> reports whether any Unicode code points in chars are within s.

Static Public Function ContainsAny(s As String, chars As String) As Boolean

  Dim i As Integer
  Dim b As Boolean = False

  For i = 0 To chars.Len - 1
    If s Like "*" & chars[i, 1] & "*" Then
      b = True
      Break
    Endif
  Next
  Return b

End

' GO Package strings
'Public Function ContainsRune(s As String, r rune) As Boolean
'
'End

' GO Package strings
'Public Function Count(s As String, substr As String) As Integer
'
'End

'' GO Package strings

Public Function EqualFold(s As String, t As String) As Boolean

End

'' <b>RAD Extension.</b><br>
'' Fields splits the string s around each instance of one or more consecutive white space characters returning a string[] of substrings of s or an empty string[] if s contains only white space.
'' GO Package strings
Static Public Function Fields(s As String) As String[]

  Dim sTmp As String
  Dim word As String
  Dim aOut As New String[]

  While InStr(sTmp, "\t")
    sTmp = Replace(sTmp, "\t", " ")
  Wend

  sTmp = Trim(RTrim(s))

  While InStr(sTmp, "  ")
    sTmp = Replace(sTmp, "  ", " ")
  Wend

  For Each word In Split(sTmp, " ")
    aOut.Add(word)
  Next

  Return aOut

End

' GO Package strings
'Public Function FieldsFunc(s As String, f func(rune)bool) As String[]
'
'End

'' GO Package strings

Public Function HasPrefix(s As String, prefix As String) As Boolean

End

'' GO Package strings

Public Function HasSuffix(s As String, suffix As String) As Boolean

End

' '' Index returns the index of the first instance of substr in s, or -1 if substr is not present in s.
'
' Static Public Function Index(s As String, substr As String) As Integer
'
'   Return String.InStr(s, substr)
'
' End

'' GO Package strings

Public Function IndexAny(s As String, chars As String) As Integer

End

'' GO Package strings

Public Function IndexByte(s As String, c As Byte) As Integer

  Return String.Index(s, c)

End

' GO Package strings
'Public Function IndexFunc(s As String, f func(rune)bool) As Integer
'
'End

' GO Package strings
'Public Function IndexRune(s string, r rune) As Integer
'
'End

'' GO Package strings

Public Function Join(elems As String[], sep As String) As String

End

'' GO Package strings

Public Function LastIndex(s As String, substr As String) As Integer

End

'' GO Package strings

Public Function LastIndexAny(s As String, chars As String) As Integer

End

'' GO Package strings

Public Function LastIndexByte(s As String, c As Byte) As Integer

End

' GO Package strings
'Public Function LastIndexFunc(s string, f func(rune)bool) As Integer
'
'End

' GO Package strings
'Public Function Map(mapping func(rune)rune, s string) As String
'
'End

'' GO Package strings

Public Function Repeat(s As String, count As Integer) As String

End

'' GO Package strings

Public Function Replace(s As String, orig As String, chan As String, n As Integer) As String

End

'' GO Package strings

Public Function ReplaceAll(s As String, orig As String, chan As String) As String

End

'' GO Package strings

Public Function Split(s As String, sep As String) As String[]

End

'' GO Package strings

Public Function SplitAfter(s As String, sep As String) As String[]

End

'' GO Package strings

Public Function SplitAfterN(s As String, sep As String, n As Integer) As String[]

End

'' GO Package strings

Public Function SplitN(s As String, sep As String, n As Integer) As String[]

End

'' <b>RAD Extension.</b><br>
'' Converts the first character of each word to upper case.
'' GO Package strings

Static Public Function Title(s As String) As String

  Dim sTmp As String
  Dim word As String
  Dim aOut As New String[]

  sTmp = Trim(RTrim(s))
  While InStr(sTmp, "  ")
    sTmp = Replace(sTmp, "  ", " ")
  Wend

  For Each word In Split(sTmp, " ")
    aOut.Add(Upper(Mid(word, 1, 1)) & Mid(Lower(word), 2))
  Next

  Return aOut.Join(" ")

End

Public Function ToLower(s As String) As String

  String.UCaseFirst

End

' GO Package strings
'Public Function ToLowerSpecial(c unicode.SpecialCase, s As String) As String
'
'End

'' GO Package strings

Public Function ToTitle(s As String) As String

End

' GO Package strings
'Public Function ToTitleSpecial(c As Unicode.SpecialCase, s As String) As String
'
'End

'' GO Package strings

Public Function ToUpper(s As String) As String

End

' GO Package strings
'Public Function ToUpperSpecial(c As Unicode.SpecialCase, s As String) As String
'
'End

'' GO Package strings

Public Function ToValidUTF8(s As String, replacement As String) As String

End

' '' GO Package strings
'
' Public Function Trim(s As String, cutset As String) As String
'
' End

' GO Package strings
'Public Function TrimFunc(s As String, f func(rune)bool) As String
'
'End

'' GO Package strings

Public Function TrimLeft(s As String, cutset As String) As String

End

' GO Package strings
'Public Function TrimLeftFunc(s As String, f func(rune)bool) As String
'
'End

'' GO Package strings

Public Function TrimPrefix(s As String, prefix As String) As String

End

'' GO Package strings

Public Function TrimRight(s As String, cutset As String) As String

End

' GO Package strings
'Public Function TrimRightFunc(s As String, f func(rune)bool) As String
'
'End

'' GO Package strings

Public Function TrimSpace(s As String) As String

  Return Trim(s)

End

'' GO Package strings

Public Function TrimSuffix(s As String, suffix As String) As String

End
