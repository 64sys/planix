' Gambas module file

''' General files and directories utilities.
' RADG
' Rapid Application Development for Gambas
'
' Copyright (C) Martín Belmonte
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
'

Export

'' Returns a list of files in a directory that is passed as a parameter. Optionally, a list of existing files can be passed as a parameter, which will be omitted from the output list if they are found, and a file extension filter in the mp3 style:ods:txt

Public Function FilesNew(strDirectory As String, Optional stxFilesOpt As String[], Optional strFilterOpt As String) As String[]

  Dim stxFiles As New String[]
  Dim intFile As Integer
  Dim stxFilesNew As New String[] ' Directory files that exist in DB

  stxFiles = uty.ScanDir(strDirectory, strFilterOpt)

  'For each file check if it exists in the database
  If stxFilesOpt.Count > 0 Then
    For intFile = 0 To stxFiles.Max
      If stxFilesOpt.Find(stxFiles[intFile]) = -1 Then
        stxFilesNew.Add(stxFiles[intFile])
      Endif
    Next
  Else ' All files found will be new
    stxFilesNew = stxFiles
  Endif

  Return stxFilesNew

End

'' Returns a list of files in a directory that match those of the list passed as a parameter, that is, it verifies that they exist. Optionally, you can pass an extension filter parameter to narrow the search.

Public Function FilesExist(strDirectory As String, Optional stxFilesOpt As String[], Optional strFilterOpt As String) As String[]

  Dim stxFiles As New String[]
  Dim intFile As Integer
  Dim stxFilesExist As New String[] ' Directory files that exist in DB

  stxFiles = uty.ScanDir(strDirectory, strFilterOpt)

  'For each file check if it exists in the database
  If stxFilesOpt.Count > 0 Then
    For intFile = 0 To stxFiles.Max
      If stxFilesOpt.Find(stxFiles[intFile]) > -1 Then
        stxFilesExist.Add(stxFiles[intFile])
      Endif
    Next
  Else
    stxFilesExist.Clear
  Endif

  Return stxFilesExist

End

Public Function FilesNone(strDirectory As String, Optional stxFilesOpt As String[], Optional strFilterOpt As String) As String[] ''Devuelve una lista de archivos que no existen en el directorio, es necesario parar una lista de archivos para contrastar.

  Dim stxFiles As New String[]
  Dim intFile As Integer
  Dim stxFilesNone As New String[] ' Directory files that exist in DB

  stxFiles = uty.ScanDir(strDirectory, strFilterOpt)

  'For each file check if it exists in the database
  If stxFilesOpt.Count > 0 Then
    For intFile = 0 To stxFilesOpt.Max
      If stxFiles.Find(stxFilesOpt[intFile]) = -1 Then
        stxFilesNone.Add(stxFilesOpt[intFile])
      Endif
    Next
  Else
    stxFilesNone.Clear
  Endif

  Return stxFilesNone

End

' '' Usual file versions
'
' Private Function FileVersionShort(s As String) As String
'
'   Dim fvn As New Collection
'
'   fvn.Add("DWG13", "DWG AutoDesk AutoCAD Release 13")
'   fvn.Add("DWG14", "DWG AutoDesk AutoCAD Release 14")
'   fvn.Add("DWG2000", "DWG AutoDesk AutoCAD 2000/2002")
'   fvn.Add("DWG2004", "DWG AutoDesk AutoCAD 2004/2005/2006")
'   fvn.Add("DWG2007", "DWG AutoDesk AutoCAD 2007/2008/2009")
'   fvn.Add("DWG2010", "DWG AutoDesk AutoCAD 2010/2011/2012")
'   fvn.Add("DWG2013", "DWG AutoDesk AutoCAD 2013/2014")
'   fvn.Add("DWG2018", "DWG AutoDesk AutoCAD 2018/2019/2020/2021")
'
'   If fvn.Exist(s) Then
'     Return fvn[s]
'   Else
'     Return s
'   Endif
'
' End

'' Taking a template file replace the labels with values. Returns a matrix with a list of files, first the product and then the pdf, in case any of these do not exist in the position of the matrix it will make an empty string.

Public Function FileTemplate(strFileSeed As String, strFileProduct As String, stxTag As String[], stxDat As String[]) As String[]

  Dim strTextProduct As String
  Dim intN As Integer
  Dim strFilePdf As String

  Dim stxFilesOutput As New String[]
  Dim strFileSvg As String

  strFilePdf = File.Dir(strFileProduct) &/ File.BaseName(strFileProduct) & ".pdf"
  strFileSvg = File.Dir(strFileProduct) &/ File.BaseName(strFileProduct) & ".svg"

  If Exist(strFileSeed) = True Then
    strTextProduct = File.Load(strFileSeed)

    If strTextProduct <> "" Then
      For intN = 0 To stxTag.Max

        strTextProduct = Replace(strTextProduct, stxTag[intN], stxDat[intN])

      Next

      If Exist(strFileProduct) Then
        Kill strFileProduct
      Endif

      If Exist(strFilePdf) Then
        Kill strFilePdf
      Endif
      Wait 0.1

      File.Save(strFileProduct, strTextProduct)

      Wait 0.1

      'Shell "dia " & strFileProduct & " -e " & strFileSvg Wait
      Shell "dia " & strFileProduct & " -e " & strFilePdf Wait
      'Shell "convert " & strFileSvg & " " & strFilePdf Wait

    Endif

  Endif

  If Exist(strFileProduct) = True Then
    stxFilesOutput.Add(strFileProduct)
  Else
    stxFilesOutput.Add("")
  Endif

  If Exist(strFileSvg) = True Then
    stxFilesOutput.Add(strFileSvg)
  Else
    stxFilesOutput.Add("")
  Endif

  If Exist(strFilePdf) = True Then
    stxFilesOutput.Add(strFilePdf)
  Else
    stxFilesOutput.Add("")
  Endif

  Return stxFilesOutput

End

' ######################## Reading and writing files

'' Returns a text array where each item is a line from the text file. Even the blank lines

Public Function FileLoadRaw(strPath As String) As String[]

  Dim strList As String
  Dim stxList As New String[]

  stxList.Clear

  If Exist(strPath) Then

    strList = File.Load(strPath)

    If InStr(strList, "\n") > -1 Then
      stxList = Split(strList, "\n")
    Else
      If String.Len(strList) > 0 Then
        stxList.Add(strList)
      Endif
    Endif
  Endif

  Return stxList

End

'' Returns a text, filename concatenating all the fragments passed to it shift to lowercase and removes characters outside the 97-122 ASCCI range.

Public Function FileNospace(stxParam As String[], Optional strDelim As String, Optional strExt As String) As String

  Dim intPar As Integer
  Dim strTemp As String
  Dim intLeter As Integer
  Dim strLeter As String
  Dim strOutTmp As String
  Dim stxOutput As New String[]
  Dim strOutput As String

  If strDelim = "" Then
    strDelim = "#"
  Endif

  If strExt <> "" Then
    strExt = String.LCase(strExt)
    If InStr(strExt, ".") Then
      strExt = Replace(strExt, ".", "")
    Else
      strExt = "." & strExt
    Endif
  Endif

  If stxParam.Count > 0 Then
    For intPar = 0 To stxParam.Max

      strTemp = stxParam[intPar]
      strTemp = String.LCase(strTemp)
      strTemp = String.RemoveDiacritics(strTemp)
      strTemp = Replace(strTemp, "  ", Chr(45))
      strTemp = Replace(strTemp, "_", Chr(45))
      strTemp = Replace(strTemp, "--", Chr(45))
      strOutTmp = ""
      For intLeter = 1 To String.Len(strTemp)
        strLeter = String.Mid(strTemp, intLeter, 1)
        Select Asc(strLeter)
          Case Chr(32), Chr(45) ' Espacio o Gión
            strOutTmp &= "-"
          Case Else
            If Asc(strLeter) > 96 And Asc(strLeter) < 123 Then
              strOutTmp &= strLeter
            Endif
        End Select
      Next
      stxOutput.Add(strOutTmp)
    Next
  Endif

  strOutput = stxOutput.Join(strDelim) & strExt

  Return strOutput

End

'' Returns an array with the metadata extracted by the jhead terminal program.

Public Function PicData(strPath As String) As Collection

  Dim strExifBruto As String
  Dim stxExifBruto As New String[]
  Dim intLin As Integer
  Dim intCur As Integer
  Dim intLen As Integer
  Dim strTag As String ' Exif tag name
  Dim vrtVal As String ' Tag value
  Dim ctnExif As New Collection

  Shell "jhead -nofinfo '" & strPath & "' 2>&1" To strExifBruto 'Take all the tags from the file
  stxExifBruto = Split(strExifBruto, "\n")
  For intLin = 0 To stxExifBruto.Max
    If stxExifBruto[intLin] <> "" Then
      intCur = InStr(stxExifBruto[intLin], ": ")
      intLen = String.Len(stxExifBruto[intLin])
      strTag = String.Mid(stxExifBruto[intLin], 1, intCur - 1)
      vrtVal = String.Mid(stxExifBruto[intLin], intCur + 2, intLen - intCur - 1)
      ctnExif.Add(vrtVal, strTag)
    Endif
  Next
  Return ctnExif

End
