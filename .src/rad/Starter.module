' Gambas module file

' Variables a transferir
Private adi As String               '' Directorio del programa
Private apc As String               '' Archivo de configuracion del programa
Private CADConfig As String         '' CAD config file
Private etx As String               '' Editor de texto plano por defecto
Private lgf As String               '' Archivo de registro de incidencias
Public lgg As Logger               '' Registro de eventos de la aplicaciÃ³n.
'----------------------
Public cCommandsList As New Collection   '' Commands list
Public cColors As New Collection     '' Colors list
Public ColorsRGB As New Variant[]    '' Colors lists each item as [r,g,b] Integer[]
Public cStyles As New Collection     '' Linetypes list
Public cWeights As New Collection     '' Widths list
Public sDecimal As String            '' Character used in system for separation decimal
Public cEntities As New Collection   '' DWG Entities list

Public Sub Main()

  Dim i As Integer

  SetDirsAndFiles()
  SetAppEventsLog()
  SetEnvironmentVars()
  SetExternalApps()
  SetCommandsList()

  cEntities = dwg.DWGEntityList()

  FMain.Show()

End

'' Activation of the event log system

Private Sub SetAppEventsLog()

  If Exist(lgf) = False Then
    Shell "touch " & lgf Wait
  Endif
  lgg = New Logger(Logger.Info, Logger.DefaultFormat, lgf)
  lgg.Begin

End

Private Sub SetCommandsList()

  cCommandsList.Add(["chamfer", "cd"], "chamfer")
  cCommandsList.Add(["copy", "c"], "copy")
  cCommandsList.Add(["divide", "dx"], "divide")
  cCommandsList.Add(["erase", "de"], "erase")
  cCommandsList.Add(["extend", "e"], "extend")
  cCommandsList.Add(["fillet", "f"], "fillet")
  cCommandsList.Add(["mirror", "mn"], "mirror")
  cCommandsList.Add(["move", "m"], "move")
  cCommandsList.Add(["offset", "fg"], "offset")
  cCommandsList.Add(["pan", "zc"], "pan")
  cCommandsList.Add(["rotate", "rt"], "rotate")
  cCommandsList.Add(["scale", "sc"], "scale")
  cCommandsList.Add(["stretch", "s"], "stretch")
  cCommandsList.Add(["trim", "tr"], "trim")
  cCommandsList.Add(["zoome", "zx"], "zoome")
  cCommandsList.Add(["zoomw", "z"], "zoomw")

  cCommandsList.Add(["arc", "a"], "arc")
  cCommandsList.Add(["circle", "cv"], "circle")
  cCommandsList.Add(["dim", "dw"], "dim")
  cCommandsList.Add(["dim", "dw"], "dim")

  cCommandsList.Add(["ellipse", "ew"], "ellipse")
  cCommandsList.Add(["hatch", "ht"], "hatch")
  cCommandsList.Add(["insert", "b"], "insert")
  cCommandsList.Add(["leader", "li"], "leader")
  cCommandsList.Add(["line", "l"], "line")
  cCommandsList.Add(["mtext", "tt"], "mtext")
  cCommandsList.Add(["lwpolyline", "po"], "lwpolyline")
  cCommandsList.Add(["rectangle", "re"], "rectangle")
  cCommandsList.Add(["solid", "sa"], "solid")
  cCommandsList.Add(["spline", "sq"], "spline")
  cCommandsList.Add(["text", "t"], "text")

  cCommandsList.Add(["beam", "w1"], "beam")
  cCommandsList.Add(["column", "w2"], "column")
  cCommandsList.Add(["slab3p", "w3"], "slab3p")
  cCommandsList.Add(["slab4p", "w4"], "slab4p")
  cCommandsList.Add(["wallcolumn", "w5"], "wallcolumn")

  cCommandsList.Add(["layers", "lk"], "layers")

End

Private Sub SetDirsAndFiles()

  Dim i As Integer
  Dim thx As New String[]           '' Lista de temas del editor interno

  sDecimal = sog.GetLcNumeric()[0]

  '' Verificar que existe el direcotrio del porgrama en Home
  adi = User.Home &/ "." & String.LCase(vag.NoSymbols(Application.Title))
  ' sFonts = adi &/ "fonts/lfe"
  ' sTextures = adi &/ "textures"

  apc = adi &/ "cfg.xml"
  lgf = adi &/ Format(Now(), "yyyy") & ".log"

  If Exist(adi) = False Then
    Shell "mkdir -p " & adi Wait
  Endif

  ' If Exist(sFonts) = False Then
  '   Shell "mkdir -p " & sFonts Wait
  ' Endif

  ' thx.Clear
  ' thx = fil.RListFiles("./fonts/lfe", ["lff"])
  '
  ' If thx.Count > 0 Then
  '   For i = 0 To thx.Max
  '     If Exist(thx[i]) Then
  '       If Exist(sFonts &/ File.Name(thx[i])) = False Then
  '         Copy thx[i] To sFonts &/ File.Name(thx[i])
  '       Endif
  '     Endif
  '   Next
  ' Endif

  ' If Exist(sTextures) = False Then
  '   Shell "mkdir -p " & sTextures Wait
  ' Endif

  ' thx.Clear
  ' thx = fil.RListFiles("./textures", ["jpg", "jpeg", "png"])
  '
  ' If thx.Count > 0 Then
  '   For i = 0 To thx.Max
  '     If Exist(thx[i]) Then
  '       If Exist(sTextures &/ File.Name(thx[i])) = False Then
  '         Copy thx[i] To sTextures &/ File.Name(thx[i])
  '       Endif
  '     Endif
  '   Next
  ' Endif

End

Private Sub SetEnvironmentVars()

  ''Vars for OpenGL window
  Dim i As Integer

  ' Select xmg.GetVar("CAD.Background-Dark", apc)
  '
  '   Case True
  '     flgWindowBackColor = Color.White
  '     flgWindowInfoColor = &HFFFF00
  '     flgWindowTextColor = Color.Blue
  '     flgWindowCursorColor = Color.Black
  '     flgWhiteAndBlack = Color.Black
  '
  '   Case Else
  '     flgWindowBackColor = Color.Black
  '     flgWindowInfoColor = &HA0A000
  '     flgWindowTextColor = Color.Yellow
  '     flgWindowCursorColor = Color.White
  '     flgWhiteAndBlack = Color.White
  '
  ' End Select

  '' Setting the special environment variables from XML file
  ''TODO: Change to a json text file
  CADConfig = adi &/ "cad.xml"

  '' Load the colors list
  ColorsRGB = dwg.DWGColors()
  'For i = 0 To ColorsRGB.Max
  '  cColors.Add([ColorsRGB[i], True], CStr(i))
  'Next

  '' Load the linetypes list
  cStyles = dwg.NewStyles()

  '' Load the linetypes list
  cWeights = dwg.NewWeights()

  ' gcolor = cad.GauchoDecodeColor()
  '
  ' ' corrijo los colores que no se ven contra el fondo
  ' gcolor[0] = flgWhiteAndBlack
  ' gcolor[7] = flgWhiteAndBlack
  ' gcolor[255] = flgWhiteAndBlack
  ' gcolor[250] = flgWhiteAndBlack

End

'' Setting the external applications

Private Sub SetExternalApps()

  '' Setting the default plain text editor in the system
  If sog.MimeDefaultApp("text/plain").Count > 0 Then
    etx = sog.MimeDefaultApp("text/plain")[0]
  Else
    etx = ""
  Endif

End
